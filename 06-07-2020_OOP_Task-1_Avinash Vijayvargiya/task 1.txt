/*
ALGORITHM 
To insert node at the end of a Linked List
Begin:
    createSinglyLinkedList (head)
    alloc (newNode)
    If (newNode == NULL) then
        write ('Unable to allocate memory')
    End if
    Else then
        read (data)
        newNode.data <- data
        newNode.next <- NULL
        temp <- head
        While (temp.next != NULL) do
            temp <- temp.next
        End while
        temp.next <- newNode
    End else
End
*/

//HEADE FILES USED
#include<stdlib.h>
#include <stdio.h>

//FUNCATION DECLARATION
void create();
void display();
void insert_begin();
void insert_end();
void insert_pos();
void delete_begin();
void delete_end();
void delete_pos();
 
//DEFINING NODE 
struct node
{
        int info;
        struct node *next;
};
struct node *start=NULL;

// MAIN FUNCATION DECLARATION
int main(){
        int choice;
        while(1){
               
                printf("\nMENU\n");
                printf("\n 1.Create a linked List\n");
                printf("\n 2.Display\n");
                printf("\n 3.Insert at the beginning\n");
                printf("\n 4.Insert at the end\n");
                printf("\n 5.Insert at specified position\n");
                printf("\n 6.Delete from beginning\n");
                printf("\n 7.Delete from the end\n");
                printf("\n 8.Delete from specified position\n");
                printf("\n 9.Exit\n");
                printf("Enter your choice");
                scanf("%d",&choice);
                switch(choice){
                        case 1:
                            create();
                            break;
                        case 2:
                            display();
                            break;
                        case 3: 
                            insert_begin();
                            break;
                        case 4:
                            insert_end();
                            break;
                        case 5:
                            insert_pos();
                            break;
                        case 6:
                            delete_begin();
                            break;
                        case 7:
                            delete_end();
                            break;
                        case 8:
                            delete_pos();
                            break;
                        case 9:
                            exit(0);
                            break;
                        default:
                            printf("No output found");
                            break;
                }
        }
        return 0;
}


//CREATE FUNCATION DEFINATION
void create(){
        struct node *temp,*ptr;
        temp=(struct node *)malloc(sizeof(struct node));
        if(temp==NULL){
                printf("\nOverflowed\n");
                exit(0);
        }
        printf("\nEnter the data value for the node:\n");
        scanf("%d",&temp->info);
        temp->next=NULL;
        if(start==NULL){
                start=temp;
        }
        else{
                ptr=start;
                while(ptr->next!=NULL){
                        ptr=ptr->next;
                }
                ptr->next=temp;
        }
}

//DISPLAY FUNCATION DEFINATION
void display(){
        struct node *ptr;
        if(start==NULL){
                printf("\nListlinked is empty:\n");
                return;
        }
        else{
                ptr=start;
                printf("n\The List elements are:\n");
                while(ptr!=NULL){
                        printf("%d\t",ptr->info );
                        ptr=ptr->next ;
                }
        }
}

//FUNCATION TO INSERT VALUE AT THE BEGINING
void insert_begin(){
        struct node *temp;
        temp=(struct node *)malloc(sizeof(struct node));
        if(temp==NULL){
                printf("\nOut of Memory Space:\n");
                return;
        }
        printf("\nEnter the data value for the node:\t" );
        scanf("%d",&temp->info);
        temp->next =NULL;
        if(start==NULL){
                start=temp;
        }
        else{
                temp->next=start;
                start=temp;
        }
}

// FUNCATION TO INSERT VALUE AT THE END
void insert_end(){
        struct node *temp,*ptr;
        temp=(struct node *)malloc(sizeof(struct node));
        if(temp==NULL){
                printf("\nOut of Memory Space:\n");
                return;
        }
        printf("\nEnter the data value for the node:\t" );
        scanf("%d",&temp->info );
        temp->next =NULL;
        if(start==NULL){
                start=temp;
        }
        else{
                ptr=start;
                while(ptr->next !=NULL){
                        ptr=ptr->next ;
                }
                ptr->next =temp;
        }
}

//FUNCATION TO INSERT VALUE AT THE RANDOM POSITION
void insert_pos(){
        struct node *ptr,*temp;
        int i,pos;
        temp=(struct node *)malloc(sizeof(struct node));
        if(temp==NULL){
                printf("\nOut of Memory Space:\n");
                return;
        }
        printf("\nEnter the position for the new node to be inserted:\t");
        scanf("%d",&pos);
        printf("\nEnter the data value of the node:\t");
        scanf("%d",&temp->info);
        temp->next=NULL;
        if(pos==0){
                temp->next=start;
                start=temp;
        }
        else{
                for(i=0,ptr=start;i<pos-1;i++) { ptr=ptr->next;
                        if(ptr==NULL){
                                printf("\nNOT FOUND IN THE LIST\n");
                                return;
                        }
                }
                temp->next =ptr->next ;
                ptr->next=temp;
        }
}

// FUNCATION TO DELETE THE VALUE OF THE FIRST VALUE OF THE LIST
void delete_begin(){
        struct node *ptr;
        if(ptr==NULL){
                printf("\nList is Empty:\n");
                return;
        }
        else{
                ptr=start;
                start=start->next ;
                printf("\nThe deleted element is :%d\t",ptr->info);
                free(ptr);  //FREEING THE MEMORY
        }
}

// FUNCATION TO DELETE THE VALUE OF THE END VALUE OF THE LIST
void delete_end(){
        struct node *temp,*ptr;
        if(start==NULL){
                printf("\nList is Empty:");
                exit(0); // EXITING THE PROGRAM
        }
        else if(start->next ==NULL){
                ptr=start;
                start=NULL;
                printf("\nThe deleted element is:%d\t",ptr->info);
                free(ptr);  //FREING THE VALUE
        }
        else{
                ptr=start;
                while(ptr->next!=NULL){
                        temp=ptr;
                        ptr=ptr->next;
                }
                temp->next=NULL;
                printf("nThe deleted element is:%dt",ptr->info);
                free(ptr); //FREEING THE MEMORY
        }
}

//FUNCATION TO DELETING VALUE AT THE RANDOM POSITION
void delete_pos(){
        int i,pos;
        struct node *temp,*ptr;
        if(start==NULL){
                printf("\nThe List is Empty:\n");
                exit(0);
        }
        else{
                printf("\nEnter the position of the node to be deleted:\t");
                scanf("%d",&pos);
                if(pos==0){
                        ptr=start;
                        start=start->next ;
                        printf("\nThe deleted element is:%d\t",ptr->info);
                        free(ptr);
                }
                else{
                        ptr=start;
                        for(i=0;i<pos;i++) { temp=ptr; ptr=ptr->next ;
                                if(ptr==NULL){
                                        printf("\nPosition not Found:\n");
                                        return;
                                }
                        }
                        temp->next =ptr->next ;
                        printf("\nThe deleted element is:%d\t",ptr->info );
                        free(ptr);  //FREEING THE MEMORY 
                }
        }
}